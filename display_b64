#!./yasl_linux

!!
{
	=:1
	"A" >=
	1:= "Z" <=
	&&
	? (1:= "A" - ) : (
		1:= "a" >=
		1:= "z" <=
		&&
		? (1:= "a" - 26 +) : (
			1:= "0" >=
			1:= "9" <= 
			&&
			? (1:= "0" - 52 +) : (
				1:= "+" ==
				? (62) : (
					1:= "/" ==
					? (63)
				)
			)
		)
	)
}convert_b64

{
    1
    -
} decrement

{
    1
    +
} increment

{
    4:7 "/":7 7:eval:7      // Division by 4
    "Image received, nb pixels: " print 
    7:=:7 7:print
    "\n" print
} get_pixels_amount

{
    =
    *
} get_pow_2

{
    8:increment:8
    8:=:8   8:get_pow_2:8    // Square stack 8

    // Compare in stack 4
    8:=:4 7:=:4 4:== ? (0:0) : (1:0)

    // Todo: check if the square is above the pixel count
    8:=:4 7:=:4 4:> ? (0:0)

    8:!:8
} get_square_amount

{
    9:#:9
    2:9
    9://:9
    9:^:9
    9:=:2
    9:!:9
    9:!:9
    8:decrement:8
    8:=:8
    0:8
    8:!=? reverse
} reverse

{
    read:2

    // Pixel in stack 7
    2:=:7   get_pixels_amount

    // Get squares in stack_8
    1:0 // boolean set into stack_0 to find the sqrt
    0:8 // initial square value
    =@get_square_amount
    "Found squares: " print 8:=print "\n" print

    2:=:3
    2:!
    2:][:9
    9:#:8
    reverse
    8:!:8
} read_std 

{
	0
	4
	#(
		6
		<<
		2:=
		2:!
		convert_b64
		|
	)
	
	=:4
	255:4
	4:&:4

	=:4
	255:4
	8:4
	4:<<:4
	4:&:4
	8:4
	4:>>:4

	=:4
	16:4
	4:>>:4

} b64_to_std

{
	"\e[38;2;"
	print
	4:print
	";"
	print
	4:print
	";"
	print
	4:print
	"m██"
	print
} put_pixel

read_std
3:=:0
8:=:7
@(
	b64_to_std
	put_pixel
	4:3
	3:-:3
	3:=:0
    7:decrement:7
    7:=:7
    0:7
    7: ==?("\n" print 8:=:7)
)
